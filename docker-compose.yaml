services:
#  nginx:
#    build:
#      context: .
#      dockerfile: "Dockerfile.nginx"
#    container_name: booking_nginx
#    ports:
#      - 80:80
#      - 443:443
#    links:
#      - booking
#      - flower

  db:
    image: postgres:15
    container_name: booking_db
    env_file:
      - ./.env
    ports:
      - "5434:5432"
    volumes:
      - booking_data:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: booking_redis

  booking:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: booking_app
    ports:
      - "8000:8000"
    command: sh -c "alembic upgrade head && uvicorn app.main:app --reload --host 0.0.0.0 --port 8000"
#    command: sh -c "alembic upgrade head && gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
    env_file:
      - ./.env
    volumes:
      - .:/app/
    depends_on:
      - db
      - redis

  celery:
    build:
      context: .
    container_name: booking_celery
    command: sh -c "celery --app=app.tasks.celery_setup:celery worker -l INFO"
    env_file:
      - ./.env
    volumes:
      - .:/app/
    depends_on:
      - redis

  celery_beat:
    build:
      context: .
    image: booking_celery
    container_name: booking_celery_beat
    command: sh -c "celery --app=app.tasks.celery_setup:celery worker -l INFO -B"
    env_file:
      - ./.env
    volumes:
      - .:/app/
    depends_on:
      - redis

  flower:
    build:
      context: .
    container_name: booking_flower
    command: sh -c "celery --app=app.tasks.celery_setup:celery flower"
    env_file:
      - ./.env
    depends_on:
      - redis
    ports:
      - 5555:5555

  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    restart: unless-stopped
    ports:
      - 9090:9090

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    volumes:
      - grafanadata:/var/lib/grafana
    restart: unless-stopped
    ports:
      - 3000:3000

volumes:
  booking_data:
  grafanadata:
  prometheusdata: